/**
 *
 */

/*设置树的属性*/
var alldevices = {};
var fleets = {};
var onlinedevices = {};
var offlinedevices = {};
var setting = {
    view: {
        showLine: false,
        showIcon: true,
        addDiyDom: addDiyDom
    },
    data: {
        simpleData: {
            enable: true
        }
    },
    check: {
        enable: true,
    },
    callback: {
        beforeClick: beforeClick
    }
};
$(function () {
    /*初始化布局*/
    var ss = window.screen.width;
    if (ss > 1800) {
        $(".bottom_infos").attr("class", "bottom_info");
        $("#Rightbody_centen ").attr("class", "Rightbody_centenguodu");
        $("#finishingTask").attr("class", "thwidth");
        $("#leftul").attr("class", "leftul");
    }
    $('body').css('zoom', 'reset');
    $(document).keydown(function (event) {
        //event.metaKey mac的command键
        if ((event.ctrlKey === true || event.metaKey === true) && (event.which === 61 || event.which === 107 || event.which === 173 || event.which === 109 || event.which === 187 || event.which === 189)) {
            event.preventDefault();
        }
    });
    $(window).bind('mousewheel DOMMouseScroll', function (event) {
        if (event.ctrlKey === true || event.metaKey) {
            event.preventDefault();
        }
    });

});

/*右收缩*/
function sousuo() {
    if ($("#imgclass").hasClass("glyphicon-chevron-down")) {
        $(".bottomb").hide(500);
        $(".bottomhead").hide(500);
        $("#Rightbody_centen ").attr("class", "Rightbody_centenguodu");
        $("#bottomRigth ").attr("class", "bottomRigthguodu");
        $("#imgclass").removeClass("glyphicon-chevron-down");
        $("#imgclass").addClass("glyphicon-chevron-up");
    } else {
        $("#imgclass").removeClass("glyphicon-chevron-up");
        $("#Rightbody_centen").attr("class", "Rightbody_centen");
        $("#bottomRigth").attr("class", "bottomRigth");
        $("#imgclass").addClass("glyphicon-chevron-down");
        $(".bottomb").show(500);
        $(".bottomhead").show(500);
    }
}

/*左收缩*/
function soushuoleft() {
    if ($("#imgeleft").hasClass("glyphicon-chevron-left")) {
        $("#leftbody").hide(500);
        $(".sousuotubiao").attr("class", "sousuotubiaoguodu");
        $(".Rightbody").attr("style", "width:99%");
        $("#imgeleft").removeClass("glyphicon-chevron-left");
        $("#imgeleft").addClass("glyphicon-chevron-right");
    } else {

        $("#leftbody").show(500);
        $(".sousuotubiaoguodu").attr("class", "sousuotubiao");
        $(".Rightbody").attr("style", "width:80%");
        $("#imgeleft").addClass("glyphicon-chevron-left");
        $("#imgeleft").removeClass("glyphicon-chevron-right");
    }
}

/**
 * 自定义DOM节点
 */
function addDiyDom(treeId, treeNode) {
    if (treeNode.pId == null) {


    } else {
        var spaceWidth = 15;
        var liObj = $("#" + treeNode.tId);
        var aObj = $("#" + treeNode.tId + "_a");
        var switchObj = $("#" + treeNode.tId + "_switch");
        var icoObj = $("#" + treeNode.tId + "_ico");
        var spanObj = $("#" + treeNode.tId + "_span");
        aObj.attr('title', '');
        aObj.append('<div class="diy swich"></div>');
        var div = $(liObj).find('div').eq(0);
        switchObj.remove();
        spanObj.remove();
        icoObj.remove();
        div.append(switchObj);
        div.append(spanObj);
        var spaceStr = "<span style='width:" + (spaceWidth * treeNode.level) + "px'><img src='/resources/new/image/lixiandian.png'/></span>";
        switchObj.before(spaceStr);
        var editStr = '';
        editStr += '<div class="diy"> ' + (treeNode.CONTACT_USER == null ? '&nbsp;' : treeNode.CONTACT_USER) + '</div>';
        var corpCat = '<div title="' + treeNode.CORP_CAT + '">' + treeNode.CORP_CAT + '</div>';
        editStr += '<div class="diy">' + (treeNode.CORP_CAT == '-' ? '&nbsp;' : corpCat) + '</div>';
        editStr += '<div class="diy">' + (treeNode.CONTACT_PHONE == null ? '&nbsp;' : treeNode.CONTACT_PHONE) + '</div>';
        aObj.append(editStr);
    }
}

/**
 * 查询数据
 */

function Treedata(str) {
    var json = [];
    var isfleet = {};
    for (devices in alldevices) {
        var property = devices;
        var item = alldevices[devices];
        if (item.na.indexOf(str) != -1) {
            json.push(fromdevices(item));
            if (isfleet[item.pid] === undefined) {
                var fleet = fleets[item.pid];
                isfleet[item.pid] = fleet;
                json.push(fromfleet(fleet));
            }
        }
    }
    $("#dataTree").empty();
    //初始化树
    $.fn.zTree.init($("#dataTree"), setting, json);
    //添加表头
    var li_head = ' <li class="head"><div class="diy">车牌号</div><div class="diy">速度</div><div class="diy">里程</div>' +
        '<div class="diy">运行状态</div></li>';
    var rows = $("#dataTree").find('li');
    if (rows.length > 0) {
        rows.eq(1).before(li_head)
    } else {
        $("#dataTree").append(li_head);
        $("#dataTree").append('<li ><div style="text-align: center;line-height: 30px;" >无符合条件数据</div></li>')
    }
}

/*加载树数据
*加载
* */
function query(isforce) {
    var alllist = [];
    var onlinelist = [];
    var offlinelist = [];
    $.ajax({
        url: "../locate/groupVehicles", //请求地址
        dataType: "json", //数据格式
        data: {
            force: isforce
        },
        type: "post", //请求方式
        async: false, //是否异步请求
        success: function (data) { //如何发送成功
            console.log(data);
            var onlines = 0;
            var list = [];
            var total = 0;
            for (var x = 0; x < data.length; x++) {
                var item = data[x];
                if (item.type === 0) {
                    item.s = gpsDataParser.parseStatus(item);
                    list.push(item);
                    console.log(item.id);
                    alldevices[item.id] = item;
                    total += 1
                    onlines += item.o
                    alllist.push(fromdevices(item));
                    if (item.o == 1) {
                        onlinelist.push(fromdevices(item));
                    } else {
                        offlinelist.push(fromdevices(item));
                    }
                } else {
                    fleets[item.id] = item;
                    alllist.push(fromfleet(item));
                    onlinelist.push(fromfleet(item));
                    offlinelist.push(fromfleet(item));
                }
            }
            $("#finishingTask").bootstrapTable("load", list);
            $('#txtAllVehicles').text(total);
            $('#txtOnlineVehicles').text(onlines);
            $('#txtOfflineVehicles').text(total - onlines);
            console.log(alllist);
            console.log(onlinelist);
            console.log(offlinelist);

        },
    })
    //初始化树
    $.fn.zTree.init($("#offlinedataTree"), setting, offlinelist);
    $.fn.zTree.init($("#dataTree"), setting, alllist);
    $.fn.zTree.init($("#onlinedataTree"), setting, onlinelist);
    //添加表头
    var li_head = ' <li class="head"><div class="diy">车牌号</div><div class="diy">速度</div><div class="diy">里程</div>' +
        '<div class="diy">运行状态</div></li>';
    var rows = $("#dataTree").find('li');
    if (rows.length > 0) {
        rows.eq(1).before(li_head)
    } else {
        $("#dataTree").append(li_head);
        $("#dataTree").append('<li ><div style="text-align: center;line-height: 30px;" >无符合条件数据</div></li>')
    }
}

/*转换数据*/
function fromdevices(item) {
    var device = new Object();
    device.CONTACT_USER = item.sp;
    device.SECTOR_NAME = item.na;
    device.CONTACT_PHONE = "已停";
    device.ORG_ID = item.pid;
    device.id = item.id;
    device.pId = item.pid;
    device.name = item.na;
    device.CORP_CAT = item.m;
    device.iconClose = "/image/zaixian.png";
    device.iconOpen = "/image/zaixian.png";
    return device;
}

/*转换数据*/
function fromfleet(item) {
    var fleet = new Object();
    fleet.ORG_ID = item.id;
    fleet.id = item.id;
    fleet.pId = "onull";
    fleet.open = true;
    fleet.name = item.na;
    return fleet;
}


$(function () {
    //初始化数据
    query(false);
    $("#inputsrecsh").keydown(function () {//给输入框绑定按键事件
        if (event.keyCode == "13") {//判断如果按下的是回车键则执行下面的代码
            Treedata($(" #inputsrecsh ").val());
        }
    });

    $("#shuaxin").click(function () {
        query(true);
    })

})


function carlist() {
    alert("车辆列表点击成功");

}

function convertor(lng, lat, callback) {    // 纠偏
    $.ajax({
        async: false,
        url: "http://api.map.baidu.com/ag/coord/convert?from=0&to=4&mode=1&x=" + lng + "&y=" + lat,
        type: "GET",
        dataType: 'jsonp',
        jsonp: 'callback',
        data: null,
        timeout: 5000,
        beforeSend: function () {

        },
        success: function (json) {// 客户端jquery预先定义好的callback函数,成功获取跨域服务器上的json数据后,会动态执行这个callback函数
            var point = new BMap.Point(json[0].x, json[0].y);
            callback(point);
        },
        complete: function (XMLHttpRequest, textStatus) {

        },
        error: function (xhr) {
            // jsonp
            // 方式此方法不被触发.原因可能是dataType如果指定为jsonp的话,就已经不是ajax事件了
            // 请求出错处理
        }
    });
}

function queryAddress(point, callback) {   //获取位置
    var gc = new BMap.Geocoder();
    gc.getLocation(point, function (rs) {
        if (!rs)
            return '';
        var addComp = rs.addressComponents;
        var address = addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber;
        if (address.length < 2) {
            address = "经度:" + 0 + ",纬度：" + 0;
        } else {
            var surround = rs.surroundingPois;
            for (var i = 0; i < surround.length; i++) {
                address += ",离" + surround[i].title + "约" + Math.round(locate.map.getDistance(point, surround[i].point)) + "米";
            }
        }
        callback(address);
    }, {
        poiRadius: 1000,
        numPois: 2
    });
}

/*点击树节点获取对象*/
function beforeClick(treeId, treeNode) {
    console.log(treeNode);
    var treeid = treeNode.tId;
    var butong = "<li class='libuoonton'> <button>点名</button> <button>资料</button><button>点名</button> <button>资料</button></li>";
    $(treeid).before(butong);
    var device = alldevices[treeNode.id];
    var geoc = new BMap.Geocoder();
    convertor(device.lng, device.lat, function (point) {
        locate.map.centerAndZoom(point, 14);
        queryAddress(point, function (address) {
            if (device != null) {
                console.log(address);
                var sContent = "<div style='margin:0px;padding:0px;border-top: 1px solid #c9c9c9;'>" +
                    "<div class='display-label'> <b>时间:</b> " + device.gt + "[定位]," + device.st + "[接收]</div>" +
                    "<div class='display-label'> <b>定位:</b>" + gpsDataParser.parseLocateType(device) + "[" + gpsDataParser.parseDirection(device) + " ]&nsbp&nsbp<b>状态:</b>" + gpsDataParser.parseAcc(device) + "</div>" +
                    "<div class='display-label'><b>里程:</b> " + device.m + "km&nsbp&nsbp<b>速度:</b>" + device.sp + "km</div>" +
                    "<div style='margin:2px;'><b>位置:</b>" + address + "</div>" +
                    "<div>" +
                    "<div class='mon-button'></div>" +
                    "" +
                    "</div>"
                "</div>"
                ;
                var data = [{
                    lng: point.lng,
                    lat: point.lat,
                    na: sContent
                }
                ]
                showGpsinfo(data, device);
            }
        });
    });
}

function libutton(id) {
    var butong = "<li class='libuoonton'> <button>点名</button> <button>资料</button><button>点名</button> <button>资料</button></li>";
    return butong;

}

/*
 * 根据x和y,加地址显示弹窗
 * */
function showGpsinfo(data, device) {
    var data_info = [];
    var title = "";

    title += '<div style="margin:0px;padding:0px">';
    title += '<div style="height:30px;margin:2px;">';
    title += '<b>';
    title += device.na;
    title += '</b>';
    title += '<div style="margin-left:15px;display:inline-block;">';
    title += '<div> <img  src="/gps_web/resources/new/image/xiaoxi.png" /></div>';
    title += '</div>';
    title += '</div>';
    title += '</div>';
    for (var i = 0; i < data.length; i++) {
        data_info.push(data[0].lng);
        data_info.push(data[0].lat);
        data_info.push(data[0].na);
    }
    locate.opts = {
        width: 360,     // 信息窗口宽度
        height: 0,     // 信息窗口高度
        title: title, // 信息窗口标题
        enableMessage: true//设置允许信息窗发送短息
    };
    locate.marker = new BMap.Marker(new BMap.Point(data_info[0], data_info[1]));
    var content = data_info[2];
    locate.map.addOverlay(locate.marker);
    addClickHandler(content, locate.marker);
    /*for(var i=0;i<data_info.length;i++){
        var marker = new BMap.Marker(new BMap.Point(data_info[i][0],data_info[i][1]));  // 创建标注
        var content = data_info[i][2];
        locate.map.addOverlay(marker);               // 将标注添加到地图中
        addClickHandler(content,marker);
    }*/
}


function addClickHandler(content, marker) {
    marker.addEventListener("click", function (e) {
            openInfo(content, e)
        }
    );
}

function openInfo(content, e) {
    var p = e.target;
    var point = new BMap.Point(p.getPosition().lng, p.getPosition().lat);
    //locate.map.centerAndZoom(point, 12);
    var infoWindow = new BMap.InfoWindow(content, locate.opts);  // 创建信息窗口对象
    locate.map.openInfoWindow(infoWindow, point); //开启信息窗口

}


