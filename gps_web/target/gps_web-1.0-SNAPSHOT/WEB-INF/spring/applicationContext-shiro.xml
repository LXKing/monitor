<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- web.xml shiro filter bean -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 认证提交地址，没有认证会请求此地址认证，由formAuthenticationFilter进行表单认证 -->
        <property name="loginUrl" value="/"/>
        <!-- 认证成功统一跳转地址，不配置的话认证成功会自动到上一个请求路径 -->
         <property name="successUrl" value="/home"/>
        <property name="unauthorizedUrl" value="/"/>
        <!-- 自定义filter -->
        <!--<property name="filters">-->
        <!--<map>-->
        <!--&lt;!&ndash; 将自定义的FormAuthenticationFilter注入shiroFiler &ndash;&gt;-->
        <!--<entry key="authc" value-ref="formAuthenticationFilter"/>-->
        <!--</map>-->
        <!--</property>-->

        <!-- 过虑器链，从上向下拦截，一般将/**放在最下边 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath() -->
                <!-- 静态资源设置匿名访问 -->
                /=anon
                /code.verify=anon
                /resources/**=anon
                /locate/realtime=anon
                <!--(.*)/resources/(.*)=anon-->
                <!-- 请求这个地址就自动退出，LogoutFilter拦截，自动注销清除session -->
                <!-- 呵呵，还是在controller手动搞吧 -->
                <!-- /user/logout=logout -->

                <!-- 需要item:query权限，取消url拦截配置，采用注解 -->
                <!-- /xxx/xxx=perms[item:query] -->

                <!-- 配置记住我或认证通过可以访问的地址 -->
                <!-- 使用UserFilter，将记住我即可访问的地址配置让UserFilter拦截，不然会被/**=authc拦截 -->
                <!-- 表示必须存在用户，身份认证通过或通过记住我认证通过的可以访问，当登入操作时不做检查 -->

                /**=user
                <!-- -/**=authc 表示所有的url都必须认证才可以访问 -->
                <!-- /**=anon 表示所有的url都可以匿名访问 -->
            </value>
        </property>
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 注入Realm -->
        <!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="customRealm"/>
        <!-- 注入缓存管理器 -->
        <!-- damn the shit -->
        <!--<property name="cacheManager" ref="cacheManager"/>-->
        <!-- 注入会话管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
        <!-- 记住我 -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 自定义Realm -->
    <bean id="customRealm" class="com.rayton.gps.service.shiro.ShiroRealm">
        <!-- 将凭证匹配器设置到realm中，realm按照凭证匹配器要求进行散列 -->
        <!--<property name="credentialsMatcher" ref="credentialsMatcher"/>-->
        <!-- 开启缓存 -->
        <property name="cachingEnabled" value="true"/>
        <!-- 认证信息:这里不进行缓存 -->
        <property name="authenticationCachingEnabled" value="false"/>
        <!-- ehcache中配置的认证缓存名称 -->
        <property name="authenticationCacheName" value="authenticationCache"/>
        <!-- 授权信息:这里进行缓存 -->
        <property name="authorizationCachingEnabled" value="true"/>
        <!-- ehcache中配置的授权缓存名称 -->
        <property name="authorizationCacheName" value="authorizationCache"/>


    </bean>

    <!-- 自定义form认证过滤器 -->
    <!--<bean id="formAuthenticationFilter" class="mmp.web.filter.shiro.ShiroFilter">-->
    <!--&lt;!&ndash; 表单账号的input名 &ndash;&gt;-->
    <!--<property name="usernameParam" value="userName"/>-->
    <!--&lt;!&ndash; 表单密码的input名 &ndash;&gt;-->
    <!--<property name="passwordParam" value="password"/>-->
    <!--&lt;!&ndash; rememberMe的input名 &ndash;&gt;-->
    <!--<property name="rememberMeParam" value="rememberMe"/>-->
    <!--</bean>-->

    <!-- 凭证匹配器 -->
    <!--<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
    <!--&lt;!&ndash; 数据库中存储到的md5的散列值，在Realm中需要设置数据库中的散列值 &ndash;&gt;-->
    <!--&lt;!&ndash; 让Shiro进行散列对比时和原始数据库中的散列值使用的算法一致 &ndash;&gt;-->
    <!--<property name="hashAlgorithmName" value="md5"/>-->
    <!--<property name="hashIterations" value="1"/>-->
    <!--</bean>-->

    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!--org.apache.shiro.crypto.CryptoException: Unable to execute 'doFinal' with cipher instance-->
        <property name="storedCredentialsHexEncoded" value="true"/>
        <!-- 数据库中存储到的md5的散列值，在Realm中需要设置数据库中的散列值 -->
        <!-- 让Shiro进行散列对比时和原始数据库中的散列值使用的算法一致 -->
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="1"/>
    </bean>

    <!-- 缓存管理器 -->
    <!-- ehcache-core.jar -->
    <!-- shiro-ehcache.jar -->
    <!-- 默认关闭认证缓存，默认开启授权缓存 -->
    <!-- 用户认证通过时，该用户第一次授权，调用Realm查询数据库查询该用户的授权信息然后给该用户授权 -->
    <!-- 用户第二次授权时，不调用Realm查询数据库，直接从缓存中取出授权信息（权限标识符）然后给该用户授权 -->

    <!--Cannot convert value of type 'org.springframework.cache.ehcache.EhCacheCacheManager'
    to required type 'org.apache.shiro.cache.CacheManager' for property 'cacheManager'-->

    <!--<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">-->
    <!--<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>-->
    <!--</bean>-->


    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehCacheManager"/>
    </bean>
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="/WEB-INF/spring/shiro-ehcache.xml"/>
        <property name="shared" value="true"/>
    </bean>


    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- session的失效时长，单位毫秒 -->
        <property name="globalSessionTimeout" value="600000"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 会话Cookie模板 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!-- 隐藏url jsessionid -->
        <property name="sessionIdUrlRewritingEnabled" value="false"/>
    </bean>

    <!-- 会话Session ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sessionId"/>
        <!--cookie的有效时间 -->
        <property name="maxAge" value="-1"/>
    </bean>

    <!-- rememberMeManager管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 记住我cookie -->
    <!-- 登陆选择自动登陆本次登陆成功会向cookie写身份信息，下次登陆从cookie中取出身份信息实现自动登陆 -->
    <!-- 涉及到session的序列化与反序列化，POJO类应该实现Serializable接口 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- rememberMe时cookie的名字 -->
        <constructor-arg value="rememberMe"/>
        <!-- 记住我cookie生效时间1天 -->
        <property name="maxAge" value="86400"/>
    </bean>


    <!-- controller service 应该分开 扫描的-->
    <!-- 开启shiro注解 -->
    <aop:config proxy-target-class="true"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>



</beans>